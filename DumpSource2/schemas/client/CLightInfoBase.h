class CLightInfoBase
{
	Vector2D m_origin2D;
	Color[2] m_Color;
	float32[2] m_LightScale;
	Color[2] m_AmbientColor;
	float32[2] m_AmbientScale;
	Color[2] m_ShadowColor;
	Color[2] m_ShadowSecondaryColor;
	float32[2] m_ShadowScale;
	float32[2] m_ShadowGroundScale;
	Color[2] m_SpecularColor;
	float32[2] m_flSpecularPower;
	float32[2] m_flSpecularIndependence;
	Vector[2] m_SpecularDirection;
	Vector[2] m_InspectorSpecularDirection;
	Vector[2] m_LightDirection;
	Vector[2] m_AmbientDirection;
	Color[2] m_FogColor;
	float32[2] m_FogStart;
	float32[2] m_FogEnd;
	float32[2] m_HeightFogValue;
	Color[2] m_HeightFogColor;
	float32[2] m_FoWDarkness;
	float32[2] m_FoWColorR;
	float32[2] m_FoWColorG;
	float32[2] m_FoWColorB;
	Color[2] m_InspectorViewFogColor;
	QAngle m_windAngle;
	float32[2] m_flWindAmount;
	float32 m_flMinWind;
	float32 m_flMaxWind;
	float32 m_flMinGust;
	float32 m_flMaxGust;
	float32 m_flMinGustDelay;
	float32 m_flMaxGustDelay;
	float32 m_flGustDuration;
	float32 m_flGustDirChange;
	QAngle[2] m_skyboxAngle;
	CStrongHandle< InfoForResourceTypeIMaterial2 >[2] m_hSkyboxMaterial;
	Color[2] m_vSkyboxTintColor;
	uint8 m_nSkyboxFogType;
	float32 m_flSkyboxAngularFogMaxEnd;
	float32 m_flSkyboxAngularFogMaxStart;
	float32 m_flSkyboxAngularFogMinStart;
	float32 m_flSkyboxAngularFogMinEnd;
	Vector4D m_vAngularParams;
	Color[2] m_vHeightFogColor;
	float32 m_flFogMaxZ;
	float32[2] m_flFogDensity;
	float32 m_flFogFalloff;
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hFogTexture0;
	float32 m_flFogLayer0Rotation;
	float32 m_flFogLayer0Scale;
	float32[2] m_flFoglayer0ScrollU;
	float32[2] m_flFoglayer0ScrollV;
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hFogTexture1;
	float32 m_flFogLayer1Rotation;
	float32 m_flFogLayer1Scale;
	float32[2] m_flFoglayer1ScrollU;
	float32[2] m_flFoglayer1ScrollV;
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hFogTextureOpacity;
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hWaterFlowMapTexture;
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hFogFlowMapTexture;
	float32 m_flFogExclusionInnerRadius;
	float32 m_flFogExclusionHeightBias;
	float32 m_flCausticSpeedScale;
	float32 m_flCausticAmplitudeScale;
	CStrongHandle< InfoForResourceTypeCTextureBase > m_hColorWarp;
	float32 m_flColorWarpBlendToFull;
	float32 m_fInnerRadius;
	float32 m_fOuterRadius;
	float32 m_flLightning_specular_pow_scale_min;
	float32 m_flLightning_specular_pow_scale_max;
	Color m_lightningColor;
	float32 m_flLightningIntensityMin;
	float32 m_flLightningIntensityMax;
	float32 m_flLightningElevation;
	float32 m_flLightningSpecularIntensity;
	float32 m_flFarZOverride;
	float32 m_flAmbientShadowAmount;
	int32 m_nWeatherType;
	CUtlString m_WeatherEffect;
	float32 m_flLightning_period_min;
	float32 m_flLightning_period_max;
	float32 m_flLightning_duration_min;
	float32 m_flLightning_duration_max;
	float32 m_flLightning_fluctuation_min;
	float32 m_flLightning_fluctuation_max;
	char[4096] m_pszLightningSound;
	float32 m_flNextLightningStartTime;
	float32 m_flNextLightningEndTime;
	float32 m_flLightningFluctuationTimeStart;
	float32 m_flLightningFluctuationTimeEnd;
	float32 m_flLightningNumFluctuations;
	float32 m_flNextLightningSoundTime;
	bool m_bPlayLightingSound;
	float32 m_flLightningEventMagnitude;
	float32 m_flLightningScale;
	float32 m_flLightningFluctuation;
	float32 m_flLightningAngle;
	float32 m_flLightningEventPercentage;
}
