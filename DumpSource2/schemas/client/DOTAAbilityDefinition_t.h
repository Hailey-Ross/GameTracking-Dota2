class DOTAAbilityDefinition_t
{
	char* m_pszAbilityName;
	char* m_pszBaseAbilityName;
	char* m_pszTextureName;
	char* m_pszSharedCooldownName;
	char* m_pszKeyOverride;
	char* m_pszItemRecipeName;
	char* m_pszLinkedAbility;
	int32 m_castActivity;
	DotaGestureSlot_t m_castActivityGestureSlot;
	KeyValues* m_pKVData;
	AbilityID_t m_iAbilityID;
	ABILITY_TYPES m_iAbilityType;
	DOTA_ABILITY_BEHAVIOR m_iAbilityBehavior;
	DOTA_UNIT_TARGET_TEAM m_iAbilityTargetTeam;
	DOTA_UNIT_TARGET_TYPE m_iAbilityTargetType;
	DOTA_UNIT_TARGET_FLAGS m_iAbilityTargetFlags;
	DAMAGE_TYPES m_iAbilityDamageType;
	SPELL_IMMUNITY_TYPES m_iAbilityImmunityType;
	SPELL_DISPELLABLE_TYPES m_iAbilityDispellableType;
	int32 m_iFightRecapLevel;
	int32 m_iTokenTier;
	item_definition_index_t m_iAssociatedConsumableItemDef;
	uint32 m_nRequiredEffectsMask;
	int32 m_iAssociatedEventID;
	int32 m_iMaxLevel;
	int32 m_iItemBaseLevel;
	float32 m_flItemLevelByGameTime;
	int32 m_iItemCost;
	int32 m_iItemInitialCharges;
	int32 m_iItemNeutralTierIndex;
	int32 m_iItemStockMax;
	float32 m_fItemStockTime;
	uint32* m_pItemShopTagKeys;
	int32 m_nNumShopTagKeys;
	AbilityID_t m_nRecipeResultAbilityID;
	CUtlVector< AbilityID_t > m_vecItemCombinesInto;
	CUtlVector< ItemRecipe_t > m_vecItemRecipes;
	int32 m_nUpgradeGoal;
	ItemQuality_t m_ItemQuality;
	float32 m_flModifierValue;
	float32 m_flModifierValueBonus;
	bool m_bHasScepterUpgrade;
	bool m_bHasShardUpgrade;
	CUtlStringToken m_strScepterRequiredFacet;
	CUtlStringToken m_strShardRequiredFacet;
	bool m_bSharedWithTeammates;
	int32 m_nCastRangeBuffer;
	int32 m_nSpecialAbilities;
	DOTASpecialAbility_t* m_pSpecialAbilities;
	CUtlVector< DOTAOutgoingBonus_t > m_OutgoingBonuses;
	CUtlOrderedMap< CUtlStringToken, DotaAbilityRelationship_t > m_mapRelationships;
	char* m_pModelName;
	char* m_pModelAlternateName;
	char* m_pEffectName;
	char* m_pPingOverrideText;
	char* m_pszRequiredCustomShopName;
	char* m_pszLinkedScepterAbility;
	char* m_pszLinkedShardAbility;
	char* m_pszDependentOnAbility;
	int32 m_nKillToastOverride;
	int32 m_iLevelsBetweenUpgrades;
	int32 m_iRequiredLevel;
	bitfield:1 m_bIsItem;
	bitfield:1 m_bItemIsRecipe;
	bitfield:1 m_bItemIsRecipeGenerated;
	bitfield:1 m_bItemRecipeConsumesCharges;
	bitfield:1 m_bItemAvailableAtSecretShop;
	bitfield:1 m_bItemAvailableAtGlobalShop;
	bitfield:1 m_bItemAvailableAtSideShop;
	bitfield:1 m_bItemAvailableAtCustomShop;
	bitfield:1 m_bItemIsPureSupport;
	bitfield:1 m_bItemIsPurchasable;
	bitfield:1 m_bItemIsUpgradeable;
	bitfield:1 m_bItemStackable;
	bitfield:1 m_bDisplayAdditionalHeroes;
	bitfield:1 m_bItemContributesToNetWorthWhenDropped;
	bitfield:1 m_bOnCastbar;
	bitfield:1 m_bOnLearnbar;
	bitfield:1 m_bIsGrantedByScepter;
	bitfield:1 m_bIsGrantedByShard;
	bitfield:1 m_bIsCastableWhileHidden;
	bitfield:1 m_bAnimationIgnoresModelScale;
	bitfield:1 m_bIsPlayerSpecificCooldown;
	bitfield:1 m_bIsAllowedInBackpack;
	bitfield:1 m_bIsObsolete;
	bitfield:1 m_bItemRequiresCustomShop;
	bitfield:1 m_bSuggestPregame;
	bitfield:1 m_bSuggestEarlygame;
	bitfield:1 m_bSuggestLategame;
	bitfield:1 m_bSuggestNotMaingame;
	bitfield:1 m_bIsAffectedByAoEIncrease;
	bitfield:1 m_bHasCastAnimation;
	bitfield:1 m_bItemHasPassive;
	bitfield:1 m_bDisplayOverheadAlertOnReceived;
	bitfield:1 m_bInnate;
	bitfield:1 m_bIsSpeciallyAllowedInNeutralSlot;
	bitfield:1 m_bIsSpeciallyBannedFromNeutralSlot;
	bitfield:1 m_bIsCooldownPausedOutOfInventory;
	bitfield:1 m_bAllowCombineFromGround;
	bitfield:1 m_bRestrictToMaxLevel;
	bitfield:1 m_bHasDynamicValue;
	bitfield:1 m_bBreakable;
	bitfield:1 m_bActiveNeutral;
	bitfield:1 m_bPassiveNeutral;
};
