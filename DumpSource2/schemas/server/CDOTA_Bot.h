class CDOTA_Bot
{
	int32 m_iLifesteal;
	int32 m_iBlock;
	bool m_bForceIdle;
	bool m_bForceCreepAttack;
	float32[30] m_fExecutionTime;
	int32 m_iCurExecutionTime;
	PlayerID_t m_iPlayerID;
	CHandle< CBaseEntity > m_hUnit;
	CDOTA_TeamCommander* m_pTeamCommander;
	int32 m_iUnitType;
	float32 m_fAggressionFactor;
	bool m_bBotControlled;
	bool m_bLiquidate;
	bool m_bDoNotPurchase;
	int32 m_iDifficulty;
	bool m_bIsFullScriptTakeover;
	DOTA_LANE m_CurrentLane;
	DOTA_LANE m_MostRecentLane;
	DOTA_LANE m_AssignedLane;
	DOTA_LANE m_TargetLane;
	DOTA_LANE m_ForcedLane;
	float32 m_fCurrentLaneAmount;
	bool m_bIsNPXCarry;
	float32 m_fEstimatedUnitDamage;
	float32 m_fEstimatedMaxUnitDamage;
	float32 m_fEstimatedBuildingDamage;
	bool m_bWantsToCast;
	int32 m_iWantsToCastFrame;
	bool m_bWantsToAttack;
	int32 m_iWantsToAttackFrame;
	CountdownTimer m_UpdateCurrentLaneTimer;
	CountdownTimer m_UpdateModeTimer;
	CountdownTimer m_ModeThinkTimer;
	CountdownTimer m_InteralRatingsTimer;
	CountdownTimer m_BuybackDelayTimer;
	CountdownTimer m_CourierUsageTimer;
	CountdownTimer m_AbilityMutedTimer;
	CountdownTimer m_AbilityMutedCheckTimer;
	GameTime_t m_HitByTowerTime;
	GameTime_t[24] m_HitByHeroTime;
	GameTime_t m_HitByCreepTime;
	GameTick_t m_nEstimatedDamageUpdatedTick;
	GameTick_t m_nNearbyUnitsUpdatedTick;
	CUtlVector< int32 > m_NearbyTrees;
	int32 m_nNearbyEnemyCreeps;
	int32 m_nAttackingCreeps;
	int32 m_nAttackingTowers;
	int32 m_nAttackingHeroes;
	GameTime_t m_fLastSeen;
	int32 m_nFailedPaths;
	CHandle< CBaseEntity > m_hTarget;
	Vector m_vTargetLoc;
	GameTime_t m_fTargetLastSeen;
	CHandle< CBaseEntity > m_hTargetLastHitCreep;
	bool m_bWasInvisible;
	bool m_bKnownInvisible;
	Vector m_vLastSeenLoc;
	Vector m_vRequestedBlinkLoc;
	GameTime_t m_fRequestedBlinkStart;
	GameTime_t m_fRequestedBlinkExpire;
	CUtlVector< CHandle< CBaseEntity > > m_hMinions;
	CUtlVector< CDOTABaseAbility* > m_Build;
	float32[27] m_fModeDesires;
	int32 m_iPreviousBotModeType;
	GameTime_t m_fPendingActionExecuteTime;
	bool m_bPendingActionBypass;
	int32 m_nForceAbility;
	GameTime_t m_flLastDebugTime;
};
